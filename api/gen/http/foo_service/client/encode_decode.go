// Code generated by goa v3.7.12, DO NOT EDIT.
//
// FooService HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/ernesto-jimenez/example-failing-goa-design/design/example -o .

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	fooservice "github.com/ernesto-jimenez/example-failing-goa-design/api/gen/foo_service"
	types "github.com/ernesto-jimenez/example-failing-goa-design/api/gen/types"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildFooMethodRequest instantiates a HTTP request object with method and
// path set to call the "FooService" service "FooMethod" endpoint
func (c *Client) BuildFooMethodRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FooMethodFooServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("FooService", "FooMethod", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFooMethodRequest returns an encoder for requests sent to the
// FooService FooMethod server.
func EncodeFooMethodRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*fooservice.FooMethodPayload)
		if !ok {
			return goahttp.ErrInvalidType("FooService", "FooMethod", "*fooservice.FooMethodPayload", v)
		}
		body := NewFooMethodRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("FooService", "FooMethod", err)
		}
		return nil
	}
}

// DecodeFooMethodResponse returns a decoder for responses returned by the
// FooService FooMethod endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeFooMethodResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FooMethodResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("FooService", "FooMethod", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidateExampleTypeResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("FooService", "FooMethod", err)
			}
			res := NewFooMethodExampleTypeOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("FooService", "FooMethod", resp.StatusCode, string(body))
		}
	}
}

// marshalFooserviceFieldWithExtensionToFieldWithExtensionRequestBody builds a
// value of type *FieldWithExtensionRequestBody from a value of type
// *fooservice.FieldWithExtension.
func marshalFooserviceFieldWithExtensionToFieldWithExtensionRequestBody(v *fooservice.FieldWithExtension) *FieldWithExtensionRequestBody {
	if v == nil {
		return nil
	}
	res := &FieldWithExtensionRequestBody{}
	if v.BarField != nil {
		res.BarField = marshalFooserviceBarToBar(v.BarField)
	}

	return res
}

// marshalFooserviceBarToBar builds a value of type *Bar from a value of type
// *fooservice.Bar.
func marshalFooserviceBarToBar(v *fooservice.Bar) *Bar {
	if v == nil {
		return nil
	}
	res := &Bar{
		Bar: v.Bar,
	}

	return res
}

// marshalTypesExternalTypeToExternalTypeRequestBody builds a value of type
// *ExternalTypeRequestBody from a value of type *types.ExternalType.
func marshalTypesExternalTypeToExternalTypeRequestBody(v *types.ExternalType) *ExternalTypeRequestBody {
	if v == nil {
		return nil
	}
	res := &ExternalTypeRequestBody{
		Field: v.Field,
	}

	return res
}

// marshalTypesSecondExternalTypeToSecondExternalTypeRequestBody builds a value
// of type *SecondExternalTypeRequestBody from a value of type
// *types.SecondExternalType.
func marshalTypesSecondExternalTypeToSecondExternalTypeRequestBody(v *types.SecondExternalType) *SecondExternalTypeRequestBody {
	if v == nil {
		return nil
	}
	res := &SecondExternalTypeRequestBody{
		Field: v.Field,
	}

	return res
}

// marshalFieldWithExtensionRequestBodyToFooserviceFieldWithExtension builds a
// value of type *fooservice.FieldWithExtension from a value of type
// *FieldWithExtensionRequestBody.
func marshalFieldWithExtensionRequestBodyToFooserviceFieldWithExtension(v *FieldWithExtensionRequestBody) *fooservice.FieldWithExtension {
	if v == nil {
		return nil
	}
	res := &fooservice.FieldWithExtension{}
	if v.BarField != nil {
		res.BarField = marshalBarToFooserviceBar(v.BarField)
	}

	return res
}

// marshalBarToFooserviceBar builds a value of type *fooservice.Bar from a
// value of type *Bar.
func marshalBarToFooserviceBar(v *Bar) *fooservice.Bar {
	if v == nil {
		return nil
	}
	res := &fooservice.Bar{
		Bar: v.Bar,
	}

	return res
}

// marshalExternalTypeRequestBodyToTypesExternalType builds a value of type
// *types.ExternalType from a value of type *ExternalTypeRequestBody.
func marshalExternalTypeRequestBodyToTypesExternalType(v *ExternalTypeRequestBody) *types.ExternalType {
	if v == nil {
		return nil
	}
	res := &types.ExternalType{
		Field: v.Field,
	}

	return res
}

// marshalSecondExternalTypeRequestBodyToTypesSecondExternalType builds a value
// of type *types.SecondExternalType from a value of type
// *SecondExternalTypeRequestBody.
func marshalSecondExternalTypeRequestBodyToTypesSecondExternalType(v *SecondExternalTypeRequestBody) *types.SecondExternalType {
	if v == nil {
		return nil
	}
	res := &types.SecondExternalType{
		Field: v.Field,
	}

	return res
}

// unmarshalExampleTypeResponseToFooserviceExampleType builds a value of type
// *fooservice.ExampleType from a value of type *ExampleTypeResponse.
func unmarshalExampleTypeResponseToFooserviceExampleType(v *ExampleTypeResponse) *fooservice.ExampleType {
	res := &fooservice.ExampleType{
		DateField: fooservice.DateTime(*v.DateField),
	}
	if v.FieldWithExtension != nil {
		res.FieldWithExtension = unmarshalFieldWithExtensionResponseToFooserviceFieldWithExtension(v.FieldWithExtension)
	}
	if v.External != nil {
		res.External = unmarshalExternalTypeResponseToTypesExternalType(v.External)
	}
	if v.SecondExternal != nil {
		res.SecondExternal = unmarshalSecondExternalTypeResponseToTypesSecondExternalType(v.SecondExternal)
	}

	return res
}

// unmarshalFieldWithExtensionResponseToFooserviceFieldWithExtension builds a
// value of type *fooservice.FieldWithExtension from a value of type
// *FieldWithExtensionResponse.
func unmarshalFieldWithExtensionResponseToFooserviceFieldWithExtension(v *FieldWithExtensionResponse) *fooservice.FieldWithExtension {
	if v == nil {
		return nil
	}
	res := &fooservice.FieldWithExtension{}
	if v.BarField != nil {
		res.BarField = unmarshalBarResponseToFooserviceBar(v.BarField)
	}

	return res
}

// unmarshalBarResponseToFooserviceBar builds a value of type *fooservice.Bar
// from a value of type *BarResponse.
func unmarshalBarResponseToFooserviceBar(v *BarResponse) *fooservice.Bar {
	if v == nil {
		return nil
	}
	res := &fooservice.Bar{
		Bar: *v.Bar,
	}

	return res
}

// unmarshalExternalTypeResponseToTypesExternalType builds a value of type
// *types.ExternalType from a value of type *ExternalTypeResponse.
func unmarshalExternalTypeResponseToTypesExternalType(v *ExternalTypeResponse) *types.ExternalType {
	if v == nil {
		return nil
	}
	res := &types.ExternalType{
		Field: *v.Field,
	}

	return res
}

// unmarshalSecondExternalTypeResponseToTypesSecondExternalType builds a value
// of type *types.SecondExternalType from a value of type
// *SecondExternalTypeResponse.
func unmarshalSecondExternalTypeResponseToTypesSecondExternalType(v *SecondExternalTypeResponse) *types.SecondExternalType {
	if v == nil {
		return nil
	}
	res := &types.SecondExternalType{
		Field: v.Field,
	}

	return res
}
