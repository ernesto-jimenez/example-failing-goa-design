// Code generated by goa v3.7.12, DO NOT EDIT.
//
// FooService HTTP client types
//
// Command:
// $ goa gen
// github.com/ernesto-jimenez/example-failing-goa-design/design/example -o .

package client

import (
	fooservice "github.com/ernesto-jimenez/example-failing-goa-design/api/gen/foo_service"
	goa "goa.design/goa/v3/pkg"
)

// FooMethodRequestBody is the type of the "FooService" service "FooMethod"
// endpoint HTTP request body.
type FooMethodRequestBody struct {
	FieldWithExtension *FieldWithExtensionRequestBody `form:"FieldWithExtension,omitempty" json:"FieldWithExtension,omitempty" xml:"FieldWithExtension,omitempty"`
	External           *ExternalTypeRequestBody       `form:"External,omitempty" json:"External,omitempty" xml:"External,omitempty"`
	SecondExternal     *SecondExternalTypeRequestBody `form:"SecondExternal,omitempty" json:"SecondExternal,omitempty" xml:"SecondExternal,omitempty"`
	DateField          string                         `form:"DateField" json:"DateField" xml:"DateField"`
}

// FooMethodResponseBody is the type of the "FooService" service "FooMethod"
// endpoint HTTP response body.
type FooMethodResponseBody []*ExampleTypeResponse

// FieldWithExtensionRequestBody is used to define fields on request body types.
type FieldWithExtensionRequestBody struct {
	BarField *Bar `form:"BarField,omitempty" json:"BarField,omitempty" xml:"BarField,omitempty"`
}

// Bar is used to define fields on request body types.
type Bar struct {
	Bar uint `form:"Bar" json:"Bar" xml:"Bar"`
}

// ExternalTypeRequestBody is used to define fields on request body types.
type ExternalTypeRequestBody struct {
	Field string `form:"Field" json:"Field" xml:"Field"`
}

// SecondExternalTypeRequestBody is used to define fields on request body types.
type SecondExternalTypeRequestBody struct {
	Field *string `form:"Field,omitempty" json:"Field,omitempty" xml:"Field,omitempty"`
}

// ExampleTypeResponse is used to define fields on response body types.
type ExampleTypeResponse struct {
	FieldWithExtension *FieldWithExtensionResponse `form:"FieldWithExtension,omitempty" json:"FieldWithExtension,omitempty" xml:"FieldWithExtension,omitempty"`
	External           *ExternalTypeResponse       `form:"External,omitempty" json:"External,omitempty" xml:"External,omitempty"`
	SecondExternal     *SecondExternalTypeResponse `form:"SecondExternal,omitempty" json:"SecondExternal,omitempty" xml:"SecondExternal,omitempty"`
	DateField          *string                     `form:"DateField,omitempty" json:"DateField,omitempty" xml:"DateField,omitempty"`
}

// FieldWithExtensionResponse is used to define fields on response body types.
type FieldWithExtensionResponse struct {
	BarField *Bar `form:"BarField,omitempty" json:"BarField,omitempty" xml:"BarField,omitempty"`
}

// ExternalTypeResponse is used to define fields on response body types.
type ExternalTypeResponse struct {
	Field *string `form:"Field,omitempty" json:"Field,omitempty" xml:"Field,omitempty"`
}

// SecondExternalTypeResponse is used to define fields on response body types.
type SecondExternalTypeResponse struct {
	Field *string `form:"Field,omitempty" json:"Field,omitempty" xml:"Field,omitempty"`
}

// NewFooMethodRequestBody builds the HTTP request body from the payload of the
// "FooMethod" endpoint of the "FooService" service.
func NewFooMethodRequestBody(p *fooservice.FooMethodPayload) *FooMethodRequestBody {
	body := &FooMethodRequestBody{
		DateField: string(p.DateField),
	}
	if p.FieldWithExtension != nil {
		body.FieldWithExtension = marshalFooserviceFieldWithExtensionToFieldWithExtensionRequestBody(p.FieldWithExtension)
	}
	if p.External != nil {
		body.External = marshalTypesExternalTypeToExternalTypeRequestBody(p.External)
	}
	if p.SecondExternal != nil {
		body.SecondExternal = marshalTypesSecondExternalTypeToSecondExternalTypeRequestBody(p.SecondExternal)
	}
	return body
}

// NewFooMethodExampleTypeOK builds a "FooService" service "FooMethod" endpoint
// result from a HTTP "OK" response.
func NewFooMethodExampleTypeOK(body []*ExampleTypeResponse) []*fooservice.ExampleType {
	v := make([]*fooservice.ExampleType, len(body))
	for i, val := range body {
		v[i] = unmarshalExampleTypeResponseToFooserviceExampleType(val)
	}

	return v
}

// ValidateExampleTypeResponse runs the validations defined on
// ExampleTypeResponse
func ValidateExampleTypeResponse(body *ExampleTypeResponse) (err error) {
	if body.DateField == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("DateField", "body"))
	}
	if body.FieldWithExtension != nil {
		if err2 := ValidateFieldWithExtensionResponse(body.FieldWithExtension); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.External != nil {
		if err2 := ValidateExternalTypeResponse(body.External); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.DateField != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.DateField", *body.DateField, goa.FormatDateTime))
	}
	return
}

// ValidateFieldWithExtensionResponse runs the validations defined on
// FieldWithExtensionResponse
func ValidateFieldWithExtensionResponse(body *FieldWithExtensionResponse) (err error) {
	if body.BarField != nil {
		if err2 := ValidateBar(body.BarField); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateExternalTypeResponse runs the validations defined on
// ExternalTypeResponse
func ValidateExternalTypeResponse(body *ExternalTypeResponse) (err error) {
	if body.Field == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Field", "body"))
	}
	return
}
